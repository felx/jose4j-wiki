=== jose4j-0.4.0 - February 13, 2015 ===
* Introduced extensive new support for producing, consuming and validating JSON Web Tokens (JWT)
* New and improved JWK filtering/searching capabilities 
* Added support for easily obtaining (and cacheing) JWKs from an HTTPS endpoint
* x5c is (again) just base64 encoded DER with no chunking/line separation 

=== jose4j-0.3.9 - November 19, 2014 ===
* Fix #007 where a runtime exception was being thrown from an HSM backed provider during initialization - algorithm availability checking now better handles runtime exceptions. 

=== jose4j-0.3.8 - September 5, 2014 ===
* Add a system property check that will enable JsonWebSignature to allow the getPayload() method to be called without validating the signature to help support code written agains versions prior to v0.3.3 but running with newer versions. Setting org.jose4j.jws.getPayload-skip-verify=true will make the JsonWebSignature getPayload() method behave as it did prior to v0.3.3, which is to simply return the payload without attempting to verify the signature or throwing an exception.


=== jose4j-0.3.7 - August 25, 2014 ===
* JSON processing code derived from the JSON.simple toolkit pulled directly into the jose4j source code to reduce dependancies and enable modifications to the JSON code (forward slashes no longer escaped and some minor efficiency improvements)
* Base64 code derived from the Apache Commons Codec project pulled directly into the jose4j source code to reduce dependancies and ensure that the requisite implementation is always available
* Put back the addSeconds(int) method on IntDate so now there’s both addSeconds(int) and addSeconds(long) - code that was compiled against the int version (using v0.2.7 for example) wouldn’t run against v0.3.4 and would give java.lang.NoSuchMethodError: org.jose4j.jwt.IntDate.addSeconds(I)V
* Add a system property that will enable JsonWebSignature to allow the 'none' algorithm by default to help support code written agains versions prior to 0.3.4 but running with newer versions. Setting org.jose4j.jws.default-allow-none=true will allow JsonWebSignature to use the none alg without explicitly setting AlgorithmConstraints.NO_CONSTRAINTS
* Add CompactSerialization class back (it had been renamed to CompactSerializer in v0.3.0)
* The x5c JWK parameter is now PEM encoded with 64 printable characters per line and \r\n as line break rather rather than just base64 encoding the DER with no chunking/line separation
* Expand the range of commons-logging dependency


=== jose4j-0.3.6 - June 6, 2014 ===
* Added JWE support for RSAES OAEP using SHA-256 and MGF1 with SHA-256 key management (RSA-OAEP-256) which was added to draft -26 of JWA at the end of April '14  
* Now published to the Central Maven Repository with a new groupId of org.bitbucket.b_c - i.e.:
{{{
#!xml
<dependency>
  <groupId>org.bitbucket.b_c</groupId>
  <artifactId>jose4j</artifactId>
  <version>0.3.6</version>
</dependency>
}}}


=== jose4j-0.3.5 - April 22, 2014 ===
* Added JWE support for AES GCM content encryption (A128GCM, A192GCM & A256GCM)
* Added JWE support for AES GCM key encryption (A128GCMKW, A192GCMKW & A256GCMKW)
* Added JWE support for PBES2 Key Encryption (PBES2-HS256+A128KW, PBES2-HS384+A192KW & PBES2-HS512+A256KW)
* Added JWS support for RSA-PSS signatures (PS256, PS384 & PS512)
* Fixed issues #005 and #006 where certain parameters of EC JWKs and ECDSA signature values were not the full length required by the specifications. 
* Fixed issue #003 where the A256GCM implementation used the wrong algorithm identifier
 

=== jose4j-0.3.4 - November 25, 2013 ===
* JWS/JWE objects now have the ability to whitelist or blacklist the algorithms that will be accepted
* **Breaking change**: by default JsonWebSignature will not accept a Plaintext JWS (i.e. "alg":"none"). Applications can use setAlgorithmConstraints(AlgorithmConstraints.NO_CONSTRAINTS) on JsonWebSignature to indicate that a Plaintext JWS is acceptable. 
* addSeconds(...) on IntDate now takes a long rather than an int (this was unfortunately a **breaking change** for code compiled against earlier versions but run against 0.3.4)


=== jose4j-0.3.3 - October 22, 2013 ===
* JsonWebStructure now has a fromCompactSerialization(...) and get/setPayload(...), which allows for client code to treat JWS/JWE more similarly in some cases
* As a result of the above, JsonWebSignature.getPayload() now checks the signature and throws an exception, if it's not valid. JsonWebSignature.getUnverifiedPayload() can be used to access the payload without the signature check. This is potentially a **breaking change** at runtime for some usage of the getPayload() method.
* Some defect fixes and clean up


=== jose4j-0.3.2  - October 17, 2013===
*JWK toJson now takes a parameter indicating the level of output to produce (i.e. public only, public+symmetric or public+symmetric+private) 
* Improve awareness of handling of algorithm support in the underlying Java runtime
* Add a simple OctJwkGenerator utility for generateing symmetric JWKs
* Added some validation to check that the given key is appropriate for the indicated algorithm and give more helpful error messages when it's not


=== jose4j-0.3.1 - September 16, 2013 ===
* update KDF for ECDH-ES key agreement per change in JWA -16 where the AlgorithmID value now has a length prefix  (http://www.ietf.org/mail-archive/web/jose/current/msg03460.html)


=== jose4j-0.3.0 - August 23, 2013 ===
Introduction of JWE support 
* Introduction of JWE support of Content Encryption "enc" algorithms: A128CBC-HS256, A192CBC-HS384, A256CBC-HS512 
* JEW Key Management "alg" algorithms: ECDH-ES, ECDH-ES+A128KW, ECDH-ES+A192KW, ECDH-ES+A256KW, RSA-OAEP, RSA1_5, A128KW, A192KW, A256KW, dir


===  jose4j-0.2.7 - July 19, 2013 ===
* Added private and symmetric key support in JWK
* Added utilities to generate EC and RSA JWKs


=== jose4j-0.2.0 - January 8, 2013===
* Added EC "kty" JWK support \\
* Added Elliptic Curve support for JWS with Algorithms "alg": ES256, ES384, ES512


=== jose4j-0.1.0  - October 31, 2012 ==
* Introduction of JWK support (only RSA "kty" Key Type) \\
* Introduction of JWS support for Algorithms "alg": none, HS256, HS384, HS512, RS256, RS384, RS512


Note: this is **not** a complete list of changes but rather just attempts to capture some of the more notable milestones and additions. 