= Welcome to jose.4.j!=

The jose.4.j library is an [[https://bitbucket.org/b_c/jose4j/src/4f10a2684a7d0285da5826037ad48852ecf4485f/LICENSE?at=master|Apache 2 licensed]] open source implementation of the JOSE specification suite (which can be used for JWT). It is written in Java and relies solely on the JCA APIs for cryptography.

JOSE is short for Javascript Object Signing and Encryption, which is the IETF Working Group developing the [[http://tools.ietf.org/html/draft-ietf-jose-json-web-signature|JSON Web Signature]] (JWS), [[http://tools.ietf.org/html/draft-ietf-jose-json-web-encryption|JSON Web Encryption]] (JWE) and [[http://tools.ietf.org/html/draft-ietf-jose-json-web-key|JSON Web Key]] (JWK) specifications. JWS and JWE use JSON and base64url encoding to secure messages in a (relatively) simple, compact and web safe format while JWK defines a JSON representation of cryptographic keys. The actual algorithms for JWS, JWE and JWK are defined in [[http://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms|JSON Web Algorithms]] (JWA).

The library supports the JWS/JWE compact serializations with the complete suite of JOSE algorithms. A more detailed breakdown is available below in the Algorithm Support section.

== Getting the Library ==
The jose4j library is available in the Maven Central Repository. To use it in your project, add the following dependency to the <dependencies> section of your pom:
{{{
#!xml
  <dependency>
    <groupId>org.bitbucket.b_c</groupId>
    <artifactId>jose4j</artifactId>
    <version>0.3.7</version>
  </dependency>
}}}

Dependency coordinate information for a number of other systems is available on the [[http://search.maven.org/#artifactdetails%7Corg.bitbucket.b_c%7Cjose4j%7C0.3.6%7Cjar|artifact details]] at central and compiled jars are also available on the [[../downloads|downloads page]].

== Code Examples ==
jose.4.j is very easy to use and, to help get started, some code examples are provided demonstrating common things you might want to do with it.

=== Hello World JWE Example ===
The following snippet uses JWE to both encrypt and decrypt the message "Hello World!" in just a few lines of code.
{{{
#!java

 Key key = new AesKey(ByteUtil.randomBytes(16));
 JsonWebEncryption jwe = new JsonWebEncryption();
 jwe.setPayload("Hello World!");
 jwe.setAlgorithmHeaderValue(KeyManagementAlgorithmIdentifiers.A128KW);
 jwe.setEncryptionMethodHeaderParameter(ContentEncryptionAlgorithmIdentifiers.AES_128_CBC_HMAC_SHA_256);
 jwe.setKey(key);
 String serializedJwe = jwe.getCompactSerialization();
 System.out.println("Serialized Encrypted JWE: " + serializedJwe);
 jwe = new JsonWebEncryption();
 jwe.setKey(key);
 jwe.setCompactSerialization(serializedJwe);
 System.out.println("Payload: " + jwe.getPayload());
}}}

=== More Examples ===
Additional and more detailed examples and explanations are available:

* [[JWS%20Examples|JWS Examples]] shows how to easily apply and verify signatures.

* [[JWE%20Examples|JWE Examples]] shows how to encrypt and decrypt messages.

* [[GSON%20and%20JWK|GSON serialization/deserialization of JWK objects]]

* A [[http://www.slideshare.net/briandavidcampbell/jose-can-you-see-34360871|presentation I did at IIW 18]] has some code examples along with some general information about JOSE and JWT. 


== Algorithm Support == 
All of the JOSE algorithms are fully implemented by jose4j. However, the library relies on the underlying cryptography provider in the Java Runtime Environment so, depending on the deployment environment, some algorithms may not be available at runtime. The tables below lists all the supported JWS/JWE/JWK algorithms and is annotated with some common JCA provider requirements.    

\\
**JWS**
|= Digital Signature or MAC Algorithm|= JWS "alg" Parameter Value|
|HMAC using SHA-2|HS256, HS384 and HS512|
|RSASSA-PKCS1-V1_5 Digital Signatures with with SHA-2|RS256, RS384 and RS512|
|Elliptic Curve Digital Signatures (ECDSA) with SHA-2|ES256, ES384 and ES512|
|RSASSA-PSS Digital Signatures with SHA-2|PS256†, PS384† and PS512†|
|Unsigned Plaintext|none|

\\
**JWE Key Encryption and Key Agreement**
|= Key Management Algorithm|= JWE "alg" Parameter Value|
|Direct encryption with a shared symmetric key| dir|
|RSAES-PKCS1-V1_5 key encryption|RSA1_5|
|RSAES using OAEP key encryption|RSA-OAEP and RSA-OAEP-256¶|
|AES key wrap|A128KW, A192KW* and A256KW*|
|AES GCM key encryption|A128GCMKW‡, A192GCMKW*‡ and A256GCMKW*‡|
|Elliptic Curve Diffie-Hellman Ephemeral Static key agreement using Concat KDF|ECDH-ES|
|Elliptic Curve Diffie-Hellman Ephemeral Static key agreement using Concat KDF with AES key wrap|ECDH-ES+A128KW, ECDH-ES+A192KW*, ECDH-ES+A256KW*|
|PBES2 with HMAC SHA-2 and AES key wrapping| PBES2-HS256+A128KW, PBES2-HS384+A192KW* and PBES2-HS512+A256KW*|

\\
**JWE Content Encryption**
|= Content Encryption Algorithm|= JWE "enc" Parameter Value|
|Authenticated encryption with AES-CBC and HMAC-SHA2|A128CBC-HS256, A192CBC-HS384* and A256CBC-HS512*|
|Authenticated encryption with Advanced Encryption Standard (AES) in Galois/Counter Mode (GCM)|A128GCM‡, A192GCM*‡ and A256GCM*‡| 

\\
**JWE Compression**
|= Compression Algorithm|= JWE "zip" Parameter Value|
|DEFLATE Compressed Data Format from RFC 1951|DEF|

\\
**JWK**
|= Key Type|= JWK "kty" Parameter Value|
|Elliptic Curve Public/Private Keys|EC|
|RSA Public/Private Keys|RSA|
|Symmetric Keys (Octet sequence)|oct|

\\* Requires the JCE's Unlimited Strength Jurisdiction Policy Files be installed for the JRE (download for [[http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html|Java 7]] and [[http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html|Java 8]]).
\\† Requires the [[https://www.bouncycastle.org/java.html|Bouncy Castle]] JCA provider (or another provider which supports RSASSA-PSS) 
\\‡ Requires Java 8 or the Bouncy Castle v1.50+ JCA provider (or another provider which supports AEAD ciphers though the JCA interface including recognizing GCMParameterSpec)
\\¶ Requires Java 8 or the Bouncy Castle JCA provider (or another provider which supports RSA/ECB/OAEPWithSHA-256AndMGF1Padding and an OAEPParameterSpec that indicates SHA-256 for MGF1) 

== Release Notes == 
These rough [[Release%20Notes|Release Notes]] capture some of the high level milestones.

== Dependencies ==
Jose4j is compiled with/for Java 7 and will also run on Java 8.

The jose.4.j library relies on [[http://commons.apache.org/proper/commons-logging/|Appache Commons Logging]]. Attempts have been made to keep the dependencies list as short as possible but it seemed like a bad idea to try and write a logging framework.

Jose4j's JSON processing was derived from the [[https://code.google.com/p/json-simple/|JSON.simple toolkit]] and Base64 encoding/decoding was derived from the [[http://commons.apache.org/proper/commons-codec/|Apache Commons Codec]] project. 